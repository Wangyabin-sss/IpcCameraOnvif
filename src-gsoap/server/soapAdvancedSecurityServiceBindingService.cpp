/* soapAdvancedSecurityServiceBindingService.cpp
   Generated by gSOAP 2.8.122 for server/onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapAdvancedSecurityServiceBindingService.h"

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	AdvancedSecurityServiceBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService(const AdvancedSecurityServiceBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	AdvancedSecurityServiceBindingService_init(_soap->imode, _soap->omode);
}

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	AdvancedSecurityServiceBindingService_init(iomode, iomode);
}

AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	AdvancedSecurityServiceBindingService_init(imode, omode);
}

AdvancedSecurityServiceBindingService::~AdvancedSecurityServiceBindingService()
{	if (this->soap_own)
	{	AdvancedSecurityServiceBindingService::destroy();
		soap_free(this->soap);
	}
}

void AdvancedSecurityServiceBindingService::AdvancedSecurityServiceBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL },
        { "wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL },
        { "wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL },
        { "c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL },
        { "ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL },
        { "saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL },
        { "saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL },
        { "wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL },
        { "xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL },
        { "wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL },
        { "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL },
        { "xmime", "http://tempuri.org/xmime.xsd", NULL, NULL },
        { "xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL },
        { "tt", "http://www.onvif.org/ver10/schema", NULL, NULL },
        { "wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL },
        { "wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL },
        { "wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL },
        { "tas", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL },
        { "tdn", "http://www.onvif.org/ver10/network/wsdl", NULL, NULL },
        { "tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL },
        { "tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL },
        { "wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL },
        { "timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL },
        { "tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL },
        { "tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL },
        { "trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void AdvancedSecurityServiceBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void AdvancedSecurityServiceBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	AdvancedSecurityServiceBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
AdvancedSecurityServiceBindingService *AdvancedSecurityServiceBindingService::copy()
{	AdvancedSecurityServiceBindingService *dup = SOAP_NEW_UNMANAGED(AdvancedSecurityServiceBindingService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

AdvancedSecurityServiceBindingService& AdvancedSecurityServiceBindingService::operator=(const AdvancedSecurityServiceBindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int AdvancedSecurityServiceBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int AdvancedSecurityServiceBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int AdvancedSecurityServiceBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int AdvancedSecurityServiceBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int AdvancedSecurityServiceBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int AdvancedSecurityServiceBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void AdvancedSecurityServiceBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void AdvancedSecurityServiceBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *AdvancedSecurityServiceBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void AdvancedSecurityServiceBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void AdvancedSecurityServiceBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence, struct _wsse__Security *wsse__Security)
{
	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
	this->soap->header->wsse__Security = wsse__Security;
}

::SOAP_ENV__Header *AdvancedSecurityServiceBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int AdvancedSecurityServiceBindingService::run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int AdvancedSecurityServiceBindingService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET AdvancedSecurityServiceBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET AdvancedSecurityServiceBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int AdvancedSecurityServiceBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int AdvancedSecurityServiceBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tas__GetServiceCapabilities(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__CreateRSAKeyPair(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__UploadKeyPairInPKCS8(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__UploadCertificateWithPrivateKeyInPKCS12(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetKeyStatus(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetPrivateKeyStatus(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAllKeys(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__DeleteKey(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__CreatePKCS10CSR(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__CreateSelfSignedCertificate(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__UploadCertificate(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetCertificate(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAllCertificates(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__DeleteCertificate(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__CreateCertificationPath(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetCertificationPath(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAllCertificationPaths(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__DeleteCertificationPath(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__UploadPassphrase(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAllPassphrases(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__DeletePassphrase(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__UploadCRL(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetCRL(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAllCRLs(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__DeleteCRL(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__CreateCertPathValidationPolicy(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetCertPathValidationPolicy(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAllCertPathValidationPolicies(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__DeleteCertPathValidationPolicy(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__AddServerCertificateAssignment(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__RemoveServerCertificateAssignment(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__ReplaceServerCertificateAssignment(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAssignedServerCertificates(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__SetEnabledTLSVersions(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetEnabledTLSVersions(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__SetClientAuthenticationRequired(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetClientAuthenticationRequired(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__SetCnMapsToUser(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetCnMapsToUser(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__AddCertPathValidationPolicyAssignment(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__RemoveCertPathValidationPolicyAssignment(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__ReplaceCertPathValidationPolicyAssignment(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAssignedCertPathValidationPolicies(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__AddDot1XConfiguration(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetAllDot1XConfigurations(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetDot1XConfiguration(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__DeleteDot1XConfiguration(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__SetNetworkInterfaceDot1XConfiguration(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__GetNetworkInterfaceDot1XConfiguration(struct soap*, AdvancedSecurityServiceBindingService*);
static int serve___tas__DeleteNetworkInterfaceDot1XConfiguration(struct soap*, AdvancedSecurityServiceBindingService*);

int AdvancedSecurityServiceBindingService::dispatch()
{	return dispatch(this->soap);
}

int AdvancedSecurityServiceBindingService::dispatch(struct soap* soap)
{
	AdvancedSecurityServiceBindingService_init(soap->imode, soap->omode);
	(void)soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "tas:GetServiceCapabilities"))
		return serve___tas__GetServiceCapabilities(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:CreateRSAKeyPair"))
		return serve___tas__CreateRSAKeyPair(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:UploadKeyPairInPKCS8"))
		return serve___tas__UploadKeyPairInPKCS8(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:UploadCertificateWithPrivateKeyInPKCS12"))
		return serve___tas__UploadCertificateWithPrivateKeyInPKCS12(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetKeyStatus"))
		return serve___tas__GetKeyStatus(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetPrivateKeyStatus"))
		return serve___tas__GetPrivateKeyStatus(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAllKeys"))
		return serve___tas__GetAllKeys(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:DeleteKey"))
		return serve___tas__DeleteKey(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:CreatePKCS10CSR"))
		return serve___tas__CreatePKCS10CSR(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:CreateSelfSignedCertificate"))
		return serve___tas__CreateSelfSignedCertificate(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:UploadCertificate"))
		return serve___tas__UploadCertificate(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetCertificate"))
		return serve___tas__GetCertificate(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAllCertificates"))
		return serve___tas__GetAllCertificates(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:DeleteCertificate"))
		return serve___tas__DeleteCertificate(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:CreateCertificationPath"))
		return serve___tas__CreateCertificationPath(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetCertificationPath"))
		return serve___tas__GetCertificationPath(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAllCertificationPaths"))
		return serve___tas__GetAllCertificationPaths(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:DeleteCertificationPath"))
		return serve___tas__DeleteCertificationPath(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:UploadPassphrase"))
		return serve___tas__UploadPassphrase(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAllPassphrases"))
		return serve___tas__GetAllPassphrases(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:DeletePassphrase"))
		return serve___tas__DeletePassphrase(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:UploadCRL"))
		return serve___tas__UploadCRL(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetCRL"))
		return serve___tas__GetCRL(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAllCRLs"))
		return serve___tas__GetAllCRLs(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:DeleteCRL"))
		return serve___tas__DeleteCRL(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:CreateCertPathValidationPolicy"))
		return serve___tas__CreateCertPathValidationPolicy(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetCertPathValidationPolicy"))
		return serve___tas__GetCertPathValidationPolicy(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAllCertPathValidationPolicies"))
		return serve___tas__GetAllCertPathValidationPolicies(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:DeleteCertPathValidationPolicy"))
		return serve___tas__DeleteCertPathValidationPolicy(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:AddServerCertificateAssignment"))
		return serve___tas__AddServerCertificateAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:RemoveServerCertificateAssignment"))
		return serve___tas__RemoveServerCertificateAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:ReplaceServerCertificateAssignment"))
		return serve___tas__ReplaceServerCertificateAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAssignedServerCertificates"))
		return serve___tas__GetAssignedServerCertificates(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:SetEnabledTLSVersions"))
		return serve___tas__SetEnabledTLSVersions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetEnabledTLSVersions"))
		return serve___tas__GetEnabledTLSVersions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:SetClientAuthenticationRequired"))
		return serve___tas__SetClientAuthenticationRequired(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetClientAuthenticationRequired"))
		return serve___tas__GetClientAuthenticationRequired(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:SetCnMapsToUser"))
		return serve___tas__SetCnMapsToUser(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetCnMapsToUser"))
		return serve___tas__GetCnMapsToUser(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:AddCertPathValidationPolicyAssignment"))
		return serve___tas__AddCertPathValidationPolicyAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:RemoveCertPathValidationPolicyAssignment"))
		return serve___tas__RemoveCertPathValidationPolicyAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:ReplaceCertPathValidationPolicyAssignment"))
		return serve___tas__ReplaceCertPathValidationPolicyAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAssignedCertPathValidationPolicies"))
		return serve___tas__GetAssignedCertPathValidationPolicies(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:AddDot1XConfiguration"))
		return serve___tas__AddDot1XConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetAllDot1XConfigurations"))
		return serve___tas__GetAllDot1XConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetDot1XConfiguration"))
		return serve___tas__GetDot1XConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:DeleteDot1XConfiguration"))
		return serve___tas__DeleteDot1XConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:SetNetworkInterfaceDot1XConfiguration"))
		return serve___tas__SetNetworkInterfaceDot1XConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:GetNetworkInterfaceDot1XConfiguration"))
		return serve___tas__GetNetworkInterfaceDot1XConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tas:DeleteNetworkInterfaceDot1XConfiguration"))
		return serve___tas__DeleteNetworkInterfaceDot1XConfiguration(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___tas__GetServiceCapabilities(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetServiceCapabilities soap_tmp___tas__GetServiceCapabilities;
	_tas__GetServiceCapabilitiesResponse tas__GetServiceCapabilitiesResponse;
	tas__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___tas__GetServiceCapabilities(soap, &soap_tmp___tas__GetServiceCapabilities);
	if (!soap_get___tas__GetServiceCapabilities(soap, &soap_tmp___tas__GetServiceCapabilities, "-tas:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___tas__GetServiceCapabilities.tas__GetServiceCapabilities, tas__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetServiceCapabilitiesResponse.soap_put(soap, "tas:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetServiceCapabilitiesResponse.soap_put(soap, "tas:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__CreateRSAKeyPair(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__CreateRSAKeyPair soap_tmp___tas__CreateRSAKeyPair;
	_tas__CreateRSAKeyPairResponse tas__CreateRSAKeyPairResponse;
	tas__CreateRSAKeyPairResponse.soap_default(soap);
	soap_default___tas__CreateRSAKeyPair(soap, &soap_tmp___tas__CreateRSAKeyPair);
	if (!soap_get___tas__CreateRSAKeyPair(soap, &soap_tmp___tas__CreateRSAKeyPair, "-tas:CreateRSAKeyPair", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateRSAKeyPair(soap_tmp___tas__CreateRSAKeyPair.tas__CreateRSAKeyPair, tas__CreateRSAKeyPairResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__CreateRSAKeyPairResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__CreateRSAKeyPairResponse.soap_put(soap, "tas:CreateRSAKeyPairResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__CreateRSAKeyPairResponse.soap_put(soap, "tas:CreateRSAKeyPairResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__UploadKeyPairInPKCS8(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__UploadKeyPairInPKCS8 soap_tmp___tas__UploadKeyPairInPKCS8;
	_tas__UploadKeyPairInPKCS8Response tas__UploadKeyPairInPKCS8Response;
	tas__UploadKeyPairInPKCS8Response.soap_default(soap);
	soap_default___tas__UploadKeyPairInPKCS8(soap, &soap_tmp___tas__UploadKeyPairInPKCS8);
	if (!soap_get___tas__UploadKeyPairInPKCS8(soap, &soap_tmp___tas__UploadKeyPairInPKCS8, "-tas:UploadKeyPairInPKCS8", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->UploadKeyPairInPKCS8(soap_tmp___tas__UploadKeyPairInPKCS8.tas__UploadKeyPairInPKCS8, tas__UploadKeyPairInPKCS8Response);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__UploadKeyPairInPKCS8Response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__UploadKeyPairInPKCS8Response.soap_put(soap, "tas:UploadKeyPairInPKCS8Response", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__UploadKeyPairInPKCS8Response.soap_put(soap, "tas:UploadKeyPairInPKCS8Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__UploadCertificateWithPrivateKeyInPKCS12(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__UploadCertificateWithPrivateKeyInPKCS12 soap_tmp___tas__UploadCertificateWithPrivateKeyInPKCS12;
	_tas__UploadCertificateWithPrivateKeyInPKCS12Response tas__UploadCertificateWithPrivateKeyInPKCS12Response;
	tas__UploadCertificateWithPrivateKeyInPKCS12Response.soap_default(soap);
	soap_default___tas__UploadCertificateWithPrivateKeyInPKCS12(soap, &soap_tmp___tas__UploadCertificateWithPrivateKeyInPKCS12);
	if (!soap_get___tas__UploadCertificateWithPrivateKeyInPKCS12(soap, &soap_tmp___tas__UploadCertificateWithPrivateKeyInPKCS12, "-tas:UploadCertificateWithPrivateKeyInPKCS12", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->UploadCertificateWithPrivateKeyInPKCS12(soap_tmp___tas__UploadCertificateWithPrivateKeyInPKCS12.tas__UploadCertificateWithPrivateKeyInPKCS12, tas__UploadCertificateWithPrivateKeyInPKCS12Response);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__UploadCertificateWithPrivateKeyInPKCS12Response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__UploadCertificateWithPrivateKeyInPKCS12Response.soap_put(soap, "tas:UploadCertificateWithPrivateKeyInPKCS12Response", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__UploadCertificateWithPrivateKeyInPKCS12Response.soap_put(soap, "tas:UploadCertificateWithPrivateKeyInPKCS12Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetKeyStatus(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetKeyStatus soap_tmp___tas__GetKeyStatus;
	_tas__GetKeyStatusResponse tas__GetKeyStatusResponse;
	tas__GetKeyStatusResponse.soap_default(soap);
	soap_default___tas__GetKeyStatus(soap, &soap_tmp___tas__GetKeyStatus);
	if (!soap_get___tas__GetKeyStatus(soap, &soap_tmp___tas__GetKeyStatus, "-tas:GetKeyStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetKeyStatus(soap_tmp___tas__GetKeyStatus.tas__GetKeyStatus, tas__GetKeyStatusResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetKeyStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetKeyStatusResponse.soap_put(soap, "tas:GetKeyStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetKeyStatusResponse.soap_put(soap, "tas:GetKeyStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetPrivateKeyStatus(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetPrivateKeyStatus soap_tmp___tas__GetPrivateKeyStatus;
	_tas__GetPrivateKeyStatusResponse tas__GetPrivateKeyStatusResponse;
	tas__GetPrivateKeyStatusResponse.soap_default(soap);
	soap_default___tas__GetPrivateKeyStatus(soap, &soap_tmp___tas__GetPrivateKeyStatus);
	if (!soap_get___tas__GetPrivateKeyStatus(soap, &soap_tmp___tas__GetPrivateKeyStatus, "-tas:GetPrivateKeyStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetPrivateKeyStatus(soap_tmp___tas__GetPrivateKeyStatus.tas__GetPrivateKeyStatus, tas__GetPrivateKeyStatusResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetPrivateKeyStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetPrivateKeyStatusResponse.soap_put(soap, "tas:GetPrivateKeyStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetPrivateKeyStatusResponse.soap_put(soap, "tas:GetPrivateKeyStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAllKeys(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAllKeys soap_tmp___tas__GetAllKeys;
	_tas__GetAllKeysResponse tas__GetAllKeysResponse;
	tas__GetAllKeysResponse.soap_default(soap);
	soap_default___tas__GetAllKeys(soap, &soap_tmp___tas__GetAllKeys);
	if (!soap_get___tas__GetAllKeys(soap, &soap_tmp___tas__GetAllKeys, "-tas:GetAllKeys", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllKeys(soap_tmp___tas__GetAllKeys.tas__GetAllKeys, tas__GetAllKeysResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAllKeysResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAllKeysResponse.soap_put(soap, "tas:GetAllKeysResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAllKeysResponse.soap_put(soap, "tas:GetAllKeysResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__DeleteKey(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__DeleteKey soap_tmp___tas__DeleteKey;
	_tas__DeleteKeyResponse tas__DeleteKeyResponse;
	tas__DeleteKeyResponse.soap_default(soap);
	soap_default___tas__DeleteKey(soap, &soap_tmp___tas__DeleteKey);
	if (!soap_get___tas__DeleteKey(soap, &soap_tmp___tas__DeleteKey, "-tas:DeleteKey", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteKey(soap_tmp___tas__DeleteKey.tas__DeleteKey, tas__DeleteKeyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__DeleteKeyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__DeleteKeyResponse.soap_put(soap, "tas:DeleteKeyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__DeleteKeyResponse.soap_put(soap, "tas:DeleteKeyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__CreatePKCS10CSR(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__CreatePKCS10CSR soap_tmp___tas__CreatePKCS10CSR;
	_tas__CreatePKCS10CSRResponse tas__CreatePKCS10CSRResponse;
	tas__CreatePKCS10CSRResponse.soap_default(soap);
	soap_default___tas__CreatePKCS10CSR(soap, &soap_tmp___tas__CreatePKCS10CSR);
	if (!soap_get___tas__CreatePKCS10CSR(soap, &soap_tmp___tas__CreatePKCS10CSR, "-tas:CreatePKCS10CSR", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreatePKCS10CSR(soap_tmp___tas__CreatePKCS10CSR.tas__CreatePKCS10CSR, tas__CreatePKCS10CSRResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__CreatePKCS10CSRResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__CreatePKCS10CSRResponse.soap_put(soap, "tas:CreatePKCS10CSRResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__CreatePKCS10CSRResponse.soap_put(soap, "tas:CreatePKCS10CSRResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__CreateSelfSignedCertificate(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__CreateSelfSignedCertificate soap_tmp___tas__CreateSelfSignedCertificate;
	_tas__CreateSelfSignedCertificateResponse tas__CreateSelfSignedCertificateResponse;
	tas__CreateSelfSignedCertificateResponse.soap_default(soap);
	soap_default___tas__CreateSelfSignedCertificate(soap, &soap_tmp___tas__CreateSelfSignedCertificate);
	if (!soap_get___tas__CreateSelfSignedCertificate(soap, &soap_tmp___tas__CreateSelfSignedCertificate, "-tas:CreateSelfSignedCertificate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateSelfSignedCertificate(soap_tmp___tas__CreateSelfSignedCertificate.tas__CreateSelfSignedCertificate, tas__CreateSelfSignedCertificateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__CreateSelfSignedCertificateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__CreateSelfSignedCertificateResponse.soap_put(soap, "tas:CreateSelfSignedCertificateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__CreateSelfSignedCertificateResponse.soap_put(soap, "tas:CreateSelfSignedCertificateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__UploadCertificate(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__UploadCertificate soap_tmp___tas__UploadCertificate;
	_tas__UploadCertificateResponse tas__UploadCertificateResponse;
	tas__UploadCertificateResponse.soap_default(soap);
	soap_default___tas__UploadCertificate(soap, &soap_tmp___tas__UploadCertificate);
	if (!soap_get___tas__UploadCertificate(soap, &soap_tmp___tas__UploadCertificate, "-tas:UploadCertificate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->UploadCertificate(soap_tmp___tas__UploadCertificate.tas__UploadCertificate, tas__UploadCertificateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__UploadCertificateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__UploadCertificateResponse.soap_put(soap, "tas:UploadCertificateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__UploadCertificateResponse.soap_put(soap, "tas:UploadCertificateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetCertificate(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetCertificate soap_tmp___tas__GetCertificate;
	_tas__GetCertificateResponse tas__GetCertificateResponse;
	tas__GetCertificateResponse.soap_default(soap);
	soap_default___tas__GetCertificate(soap, &soap_tmp___tas__GetCertificate);
	if (!soap_get___tas__GetCertificate(soap, &soap_tmp___tas__GetCertificate, "-tas:GetCertificate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCertificate(soap_tmp___tas__GetCertificate.tas__GetCertificate, tas__GetCertificateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetCertificateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetCertificateResponse.soap_put(soap, "tas:GetCertificateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetCertificateResponse.soap_put(soap, "tas:GetCertificateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAllCertificates(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAllCertificates soap_tmp___tas__GetAllCertificates;
	_tas__GetAllCertificatesResponse tas__GetAllCertificatesResponse;
	tas__GetAllCertificatesResponse.soap_default(soap);
	soap_default___tas__GetAllCertificates(soap, &soap_tmp___tas__GetAllCertificates);
	if (!soap_get___tas__GetAllCertificates(soap, &soap_tmp___tas__GetAllCertificates, "-tas:GetAllCertificates", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllCertificates(soap_tmp___tas__GetAllCertificates.tas__GetAllCertificates, tas__GetAllCertificatesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAllCertificatesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAllCertificatesResponse.soap_put(soap, "tas:GetAllCertificatesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAllCertificatesResponse.soap_put(soap, "tas:GetAllCertificatesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__DeleteCertificate(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__DeleteCertificate soap_tmp___tas__DeleteCertificate;
	_tas__DeleteCertificateResponse tas__DeleteCertificateResponse;
	tas__DeleteCertificateResponse.soap_default(soap);
	soap_default___tas__DeleteCertificate(soap, &soap_tmp___tas__DeleteCertificate);
	if (!soap_get___tas__DeleteCertificate(soap, &soap_tmp___tas__DeleteCertificate, "-tas:DeleteCertificate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteCertificate(soap_tmp___tas__DeleteCertificate.tas__DeleteCertificate, tas__DeleteCertificateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__DeleteCertificateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__DeleteCertificateResponse.soap_put(soap, "tas:DeleteCertificateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__DeleteCertificateResponse.soap_put(soap, "tas:DeleteCertificateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__CreateCertificationPath(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__CreateCertificationPath soap_tmp___tas__CreateCertificationPath;
	_tas__CreateCertificationPathResponse tas__CreateCertificationPathResponse;
	tas__CreateCertificationPathResponse.soap_default(soap);
	soap_default___tas__CreateCertificationPath(soap, &soap_tmp___tas__CreateCertificationPath);
	if (!soap_get___tas__CreateCertificationPath(soap, &soap_tmp___tas__CreateCertificationPath, "-tas:CreateCertificationPath", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateCertificationPath(soap_tmp___tas__CreateCertificationPath.tas__CreateCertificationPath, tas__CreateCertificationPathResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__CreateCertificationPathResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__CreateCertificationPathResponse.soap_put(soap, "tas:CreateCertificationPathResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__CreateCertificationPathResponse.soap_put(soap, "tas:CreateCertificationPathResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetCertificationPath(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetCertificationPath soap_tmp___tas__GetCertificationPath;
	_tas__GetCertificationPathResponse tas__GetCertificationPathResponse;
	tas__GetCertificationPathResponse.soap_default(soap);
	soap_default___tas__GetCertificationPath(soap, &soap_tmp___tas__GetCertificationPath);
	if (!soap_get___tas__GetCertificationPath(soap, &soap_tmp___tas__GetCertificationPath, "-tas:GetCertificationPath", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCertificationPath(soap_tmp___tas__GetCertificationPath.tas__GetCertificationPath, tas__GetCertificationPathResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetCertificationPathResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetCertificationPathResponse.soap_put(soap, "tas:GetCertificationPathResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetCertificationPathResponse.soap_put(soap, "tas:GetCertificationPathResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAllCertificationPaths(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAllCertificationPaths soap_tmp___tas__GetAllCertificationPaths;
	_tas__GetAllCertificationPathsResponse tas__GetAllCertificationPathsResponse;
	tas__GetAllCertificationPathsResponse.soap_default(soap);
	soap_default___tas__GetAllCertificationPaths(soap, &soap_tmp___tas__GetAllCertificationPaths);
	if (!soap_get___tas__GetAllCertificationPaths(soap, &soap_tmp___tas__GetAllCertificationPaths, "-tas:GetAllCertificationPaths", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllCertificationPaths(soap_tmp___tas__GetAllCertificationPaths.tas__GetAllCertificationPaths, tas__GetAllCertificationPathsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAllCertificationPathsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAllCertificationPathsResponse.soap_put(soap, "tas:GetAllCertificationPathsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAllCertificationPathsResponse.soap_put(soap, "tas:GetAllCertificationPathsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__DeleteCertificationPath(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__DeleteCertificationPath soap_tmp___tas__DeleteCertificationPath;
	_tas__DeleteCertificationPathResponse tas__DeleteCertificationPathResponse;
	tas__DeleteCertificationPathResponse.soap_default(soap);
	soap_default___tas__DeleteCertificationPath(soap, &soap_tmp___tas__DeleteCertificationPath);
	if (!soap_get___tas__DeleteCertificationPath(soap, &soap_tmp___tas__DeleteCertificationPath, "-tas:DeleteCertificationPath", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteCertificationPath(soap_tmp___tas__DeleteCertificationPath.tas__DeleteCertificationPath, tas__DeleteCertificationPathResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__DeleteCertificationPathResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__DeleteCertificationPathResponse.soap_put(soap, "tas:DeleteCertificationPathResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__DeleteCertificationPathResponse.soap_put(soap, "tas:DeleteCertificationPathResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__UploadPassphrase(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__UploadPassphrase soap_tmp___tas__UploadPassphrase;
	_tas__UploadPassphraseResponse tas__UploadPassphraseResponse;
	tas__UploadPassphraseResponse.soap_default(soap);
	soap_default___tas__UploadPassphrase(soap, &soap_tmp___tas__UploadPassphrase);
	if (!soap_get___tas__UploadPassphrase(soap, &soap_tmp___tas__UploadPassphrase, "-tas:UploadPassphrase", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->UploadPassphrase(soap_tmp___tas__UploadPassphrase.tas__UploadPassphrase, tas__UploadPassphraseResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__UploadPassphraseResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__UploadPassphraseResponse.soap_put(soap, "tas:UploadPassphraseResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__UploadPassphraseResponse.soap_put(soap, "tas:UploadPassphraseResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAllPassphrases(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAllPassphrases soap_tmp___tas__GetAllPassphrases;
	_tas__GetAllPassphrasesResponse tas__GetAllPassphrasesResponse;
	tas__GetAllPassphrasesResponse.soap_default(soap);
	soap_default___tas__GetAllPassphrases(soap, &soap_tmp___tas__GetAllPassphrases);
	if (!soap_get___tas__GetAllPassphrases(soap, &soap_tmp___tas__GetAllPassphrases, "-tas:GetAllPassphrases", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllPassphrases(soap_tmp___tas__GetAllPassphrases.tas__GetAllPassphrases, tas__GetAllPassphrasesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAllPassphrasesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAllPassphrasesResponse.soap_put(soap, "tas:GetAllPassphrasesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAllPassphrasesResponse.soap_put(soap, "tas:GetAllPassphrasesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__DeletePassphrase(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__DeletePassphrase soap_tmp___tas__DeletePassphrase;
	_tas__DeletePassphraseResponse tas__DeletePassphraseResponse;
	tas__DeletePassphraseResponse.soap_default(soap);
	soap_default___tas__DeletePassphrase(soap, &soap_tmp___tas__DeletePassphrase);
	if (!soap_get___tas__DeletePassphrase(soap, &soap_tmp___tas__DeletePassphrase, "-tas:DeletePassphrase", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeletePassphrase(soap_tmp___tas__DeletePassphrase.tas__DeletePassphrase, tas__DeletePassphraseResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__DeletePassphraseResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__DeletePassphraseResponse.soap_put(soap, "tas:DeletePassphraseResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__DeletePassphraseResponse.soap_put(soap, "tas:DeletePassphraseResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__UploadCRL(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__UploadCRL soap_tmp___tas__UploadCRL;
	_tas__UploadCRLResponse tas__UploadCRLResponse;
	tas__UploadCRLResponse.soap_default(soap);
	soap_default___tas__UploadCRL(soap, &soap_tmp___tas__UploadCRL);
	if (!soap_get___tas__UploadCRL(soap, &soap_tmp___tas__UploadCRL, "-tas:UploadCRL", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->UploadCRL(soap_tmp___tas__UploadCRL.tas__UploadCRL, tas__UploadCRLResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__UploadCRLResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__UploadCRLResponse.soap_put(soap, "tas:UploadCRLResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__UploadCRLResponse.soap_put(soap, "tas:UploadCRLResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetCRL(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetCRL soap_tmp___tas__GetCRL;
	_tas__GetCRLResponse tas__GetCRLResponse;
	tas__GetCRLResponse.soap_default(soap);
	soap_default___tas__GetCRL(soap, &soap_tmp___tas__GetCRL);
	if (!soap_get___tas__GetCRL(soap, &soap_tmp___tas__GetCRL, "-tas:GetCRL", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCRL(soap_tmp___tas__GetCRL.tas__GetCRL, tas__GetCRLResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetCRLResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetCRLResponse.soap_put(soap, "tas:GetCRLResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetCRLResponse.soap_put(soap, "tas:GetCRLResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAllCRLs(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAllCRLs soap_tmp___tas__GetAllCRLs;
	_tas__GetAllCRLsResponse tas__GetAllCRLsResponse;
	tas__GetAllCRLsResponse.soap_default(soap);
	soap_default___tas__GetAllCRLs(soap, &soap_tmp___tas__GetAllCRLs);
	if (!soap_get___tas__GetAllCRLs(soap, &soap_tmp___tas__GetAllCRLs, "-tas:GetAllCRLs", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllCRLs(soap_tmp___tas__GetAllCRLs.tas__GetAllCRLs, tas__GetAllCRLsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAllCRLsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAllCRLsResponse.soap_put(soap, "tas:GetAllCRLsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAllCRLsResponse.soap_put(soap, "tas:GetAllCRLsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__DeleteCRL(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__DeleteCRL soap_tmp___tas__DeleteCRL;
	_tas__DeleteCRLResponse tas__DeleteCRLResponse;
	tas__DeleteCRLResponse.soap_default(soap);
	soap_default___tas__DeleteCRL(soap, &soap_tmp___tas__DeleteCRL);
	if (!soap_get___tas__DeleteCRL(soap, &soap_tmp___tas__DeleteCRL, "-tas:DeleteCRL", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteCRL(soap_tmp___tas__DeleteCRL.tas__DeleteCRL, tas__DeleteCRLResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__DeleteCRLResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__DeleteCRLResponse.soap_put(soap, "tas:DeleteCRLResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__DeleteCRLResponse.soap_put(soap, "tas:DeleteCRLResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__CreateCertPathValidationPolicy(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__CreateCertPathValidationPolicy soap_tmp___tas__CreateCertPathValidationPolicy;
	_tas__CreateCertPathValidationPolicyResponse tas__CreateCertPathValidationPolicyResponse;
	tas__CreateCertPathValidationPolicyResponse.soap_default(soap);
	soap_default___tas__CreateCertPathValidationPolicy(soap, &soap_tmp___tas__CreateCertPathValidationPolicy);
	if (!soap_get___tas__CreateCertPathValidationPolicy(soap, &soap_tmp___tas__CreateCertPathValidationPolicy, "-tas:CreateCertPathValidationPolicy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateCertPathValidationPolicy(soap_tmp___tas__CreateCertPathValidationPolicy.tas__CreateCertPathValidationPolicy, tas__CreateCertPathValidationPolicyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__CreateCertPathValidationPolicyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__CreateCertPathValidationPolicyResponse.soap_put(soap, "tas:CreateCertPathValidationPolicyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__CreateCertPathValidationPolicyResponse.soap_put(soap, "tas:CreateCertPathValidationPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetCertPathValidationPolicy(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetCertPathValidationPolicy soap_tmp___tas__GetCertPathValidationPolicy;
	_tas__GetCertPathValidationPolicyResponse tas__GetCertPathValidationPolicyResponse;
	tas__GetCertPathValidationPolicyResponse.soap_default(soap);
	soap_default___tas__GetCertPathValidationPolicy(soap, &soap_tmp___tas__GetCertPathValidationPolicy);
	if (!soap_get___tas__GetCertPathValidationPolicy(soap, &soap_tmp___tas__GetCertPathValidationPolicy, "-tas:GetCertPathValidationPolicy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCertPathValidationPolicy(soap_tmp___tas__GetCertPathValidationPolicy.tas__GetCertPathValidationPolicy, tas__GetCertPathValidationPolicyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetCertPathValidationPolicyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetCertPathValidationPolicyResponse.soap_put(soap, "tas:GetCertPathValidationPolicyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetCertPathValidationPolicyResponse.soap_put(soap, "tas:GetCertPathValidationPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAllCertPathValidationPolicies(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAllCertPathValidationPolicies soap_tmp___tas__GetAllCertPathValidationPolicies;
	_tas__GetAllCertPathValidationPoliciesResponse tas__GetAllCertPathValidationPoliciesResponse;
	tas__GetAllCertPathValidationPoliciesResponse.soap_default(soap);
	soap_default___tas__GetAllCertPathValidationPolicies(soap, &soap_tmp___tas__GetAllCertPathValidationPolicies);
	if (!soap_get___tas__GetAllCertPathValidationPolicies(soap, &soap_tmp___tas__GetAllCertPathValidationPolicies, "-tas:GetAllCertPathValidationPolicies", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllCertPathValidationPolicies(soap_tmp___tas__GetAllCertPathValidationPolicies.tas__GetAllCertPathValidationPolicies, tas__GetAllCertPathValidationPoliciesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAllCertPathValidationPoliciesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAllCertPathValidationPoliciesResponse.soap_put(soap, "tas:GetAllCertPathValidationPoliciesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAllCertPathValidationPoliciesResponse.soap_put(soap, "tas:GetAllCertPathValidationPoliciesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__DeleteCertPathValidationPolicy(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__DeleteCertPathValidationPolicy soap_tmp___tas__DeleteCertPathValidationPolicy;
	_tas__DeleteCertPathValidationPolicyResponse tas__DeleteCertPathValidationPolicyResponse;
	tas__DeleteCertPathValidationPolicyResponse.soap_default(soap);
	soap_default___tas__DeleteCertPathValidationPolicy(soap, &soap_tmp___tas__DeleteCertPathValidationPolicy);
	if (!soap_get___tas__DeleteCertPathValidationPolicy(soap, &soap_tmp___tas__DeleteCertPathValidationPolicy, "-tas:DeleteCertPathValidationPolicy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteCertPathValidationPolicy(soap_tmp___tas__DeleteCertPathValidationPolicy.tas__DeleteCertPathValidationPolicy, tas__DeleteCertPathValidationPolicyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__DeleteCertPathValidationPolicyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__DeleteCertPathValidationPolicyResponse.soap_put(soap, "tas:DeleteCertPathValidationPolicyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__DeleteCertPathValidationPolicyResponse.soap_put(soap, "tas:DeleteCertPathValidationPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__AddServerCertificateAssignment(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__AddServerCertificateAssignment soap_tmp___tas__AddServerCertificateAssignment;
	_tas__AddServerCertificateAssignmentResponse tas__AddServerCertificateAssignmentResponse;
	tas__AddServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___tas__AddServerCertificateAssignment(soap, &soap_tmp___tas__AddServerCertificateAssignment);
	if (!soap_get___tas__AddServerCertificateAssignment(soap, &soap_tmp___tas__AddServerCertificateAssignment, "-tas:AddServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AddServerCertificateAssignment(soap_tmp___tas__AddServerCertificateAssignment.tas__AddServerCertificateAssignment, tas__AddServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__AddServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__AddServerCertificateAssignmentResponse.soap_put(soap, "tas:AddServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__AddServerCertificateAssignmentResponse.soap_put(soap, "tas:AddServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__RemoveServerCertificateAssignment(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__RemoveServerCertificateAssignment soap_tmp___tas__RemoveServerCertificateAssignment;
	_tas__RemoveServerCertificateAssignmentResponse tas__RemoveServerCertificateAssignmentResponse;
	tas__RemoveServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___tas__RemoveServerCertificateAssignment(soap, &soap_tmp___tas__RemoveServerCertificateAssignment);
	if (!soap_get___tas__RemoveServerCertificateAssignment(soap, &soap_tmp___tas__RemoveServerCertificateAssignment, "-tas:RemoveServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RemoveServerCertificateAssignment(soap_tmp___tas__RemoveServerCertificateAssignment.tas__RemoveServerCertificateAssignment, tas__RemoveServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__RemoveServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__RemoveServerCertificateAssignmentResponse.soap_put(soap, "tas:RemoveServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__RemoveServerCertificateAssignmentResponse.soap_put(soap, "tas:RemoveServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__ReplaceServerCertificateAssignment(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__ReplaceServerCertificateAssignment soap_tmp___tas__ReplaceServerCertificateAssignment;
	_tas__ReplaceServerCertificateAssignmentResponse tas__ReplaceServerCertificateAssignmentResponse;
	tas__ReplaceServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___tas__ReplaceServerCertificateAssignment(soap, &soap_tmp___tas__ReplaceServerCertificateAssignment);
	if (!soap_get___tas__ReplaceServerCertificateAssignment(soap, &soap_tmp___tas__ReplaceServerCertificateAssignment, "-tas:ReplaceServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ReplaceServerCertificateAssignment(soap_tmp___tas__ReplaceServerCertificateAssignment.tas__ReplaceServerCertificateAssignment, tas__ReplaceServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__ReplaceServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__ReplaceServerCertificateAssignmentResponse.soap_put(soap, "tas:ReplaceServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__ReplaceServerCertificateAssignmentResponse.soap_put(soap, "tas:ReplaceServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAssignedServerCertificates(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAssignedServerCertificates soap_tmp___tas__GetAssignedServerCertificates;
	_tas__GetAssignedServerCertificatesResponse tas__GetAssignedServerCertificatesResponse;
	tas__GetAssignedServerCertificatesResponse.soap_default(soap);
	soap_default___tas__GetAssignedServerCertificates(soap, &soap_tmp___tas__GetAssignedServerCertificates);
	if (!soap_get___tas__GetAssignedServerCertificates(soap, &soap_tmp___tas__GetAssignedServerCertificates, "-tas:GetAssignedServerCertificates", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAssignedServerCertificates(soap_tmp___tas__GetAssignedServerCertificates.tas__GetAssignedServerCertificates, tas__GetAssignedServerCertificatesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAssignedServerCertificatesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAssignedServerCertificatesResponse.soap_put(soap, "tas:GetAssignedServerCertificatesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAssignedServerCertificatesResponse.soap_put(soap, "tas:GetAssignedServerCertificatesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__SetEnabledTLSVersions(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__SetEnabledTLSVersions soap_tmp___tas__SetEnabledTLSVersions;
	_tas__SetEnabledTLSVersionsResponse tas__SetEnabledTLSVersionsResponse;
	tas__SetEnabledTLSVersionsResponse.soap_default(soap);
	soap_default___tas__SetEnabledTLSVersions(soap, &soap_tmp___tas__SetEnabledTLSVersions);
	if (!soap_get___tas__SetEnabledTLSVersions(soap, &soap_tmp___tas__SetEnabledTLSVersions, "-tas:SetEnabledTLSVersions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetEnabledTLSVersions(soap_tmp___tas__SetEnabledTLSVersions.tas__SetEnabledTLSVersions, tas__SetEnabledTLSVersionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__SetEnabledTLSVersionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__SetEnabledTLSVersionsResponse.soap_put(soap, "tas:SetEnabledTLSVersionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__SetEnabledTLSVersionsResponse.soap_put(soap, "tas:SetEnabledTLSVersionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetEnabledTLSVersions(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetEnabledTLSVersions soap_tmp___tas__GetEnabledTLSVersions;
	_tas__GetEnabledTLSVersionsResponse tas__GetEnabledTLSVersionsResponse;
	tas__GetEnabledTLSVersionsResponse.soap_default(soap);
	soap_default___tas__GetEnabledTLSVersions(soap, &soap_tmp___tas__GetEnabledTLSVersions);
	if (!soap_get___tas__GetEnabledTLSVersions(soap, &soap_tmp___tas__GetEnabledTLSVersions, "-tas:GetEnabledTLSVersions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetEnabledTLSVersions(soap_tmp___tas__GetEnabledTLSVersions.tas__GetEnabledTLSVersions, tas__GetEnabledTLSVersionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetEnabledTLSVersionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetEnabledTLSVersionsResponse.soap_put(soap, "tas:GetEnabledTLSVersionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetEnabledTLSVersionsResponse.soap_put(soap, "tas:GetEnabledTLSVersionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__SetClientAuthenticationRequired(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__SetClientAuthenticationRequired soap_tmp___tas__SetClientAuthenticationRequired;
	_tas__SetClientAuthenticationRequiredResponse tas__SetClientAuthenticationRequiredResponse;
	tas__SetClientAuthenticationRequiredResponse.soap_default(soap);
	soap_default___tas__SetClientAuthenticationRequired(soap, &soap_tmp___tas__SetClientAuthenticationRequired);
	if (!soap_get___tas__SetClientAuthenticationRequired(soap, &soap_tmp___tas__SetClientAuthenticationRequired, "-tas:SetClientAuthenticationRequired", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetClientAuthenticationRequired(soap_tmp___tas__SetClientAuthenticationRequired.tas__SetClientAuthenticationRequired, tas__SetClientAuthenticationRequiredResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__SetClientAuthenticationRequiredResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__SetClientAuthenticationRequiredResponse.soap_put(soap, "tas:SetClientAuthenticationRequiredResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__SetClientAuthenticationRequiredResponse.soap_put(soap, "tas:SetClientAuthenticationRequiredResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetClientAuthenticationRequired(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetClientAuthenticationRequired soap_tmp___tas__GetClientAuthenticationRequired;
	_tas__GetClientAuthenticationRequiredResponse tas__GetClientAuthenticationRequiredResponse;
	tas__GetClientAuthenticationRequiredResponse.soap_default(soap);
	soap_default___tas__GetClientAuthenticationRequired(soap, &soap_tmp___tas__GetClientAuthenticationRequired);
	if (!soap_get___tas__GetClientAuthenticationRequired(soap, &soap_tmp___tas__GetClientAuthenticationRequired, "-tas:GetClientAuthenticationRequired", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetClientAuthenticationRequired(soap_tmp___tas__GetClientAuthenticationRequired.tas__GetClientAuthenticationRequired, tas__GetClientAuthenticationRequiredResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetClientAuthenticationRequiredResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetClientAuthenticationRequiredResponse.soap_put(soap, "tas:GetClientAuthenticationRequiredResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetClientAuthenticationRequiredResponse.soap_put(soap, "tas:GetClientAuthenticationRequiredResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__SetCnMapsToUser(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__SetCnMapsToUser soap_tmp___tas__SetCnMapsToUser;
	_tas__SetCnMapsToUserResponse tas__SetCnMapsToUserResponse;
	tas__SetCnMapsToUserResponse.soap_default(soap);
	soap_default___tas__SetCnMapsToUser(soap, &soap_tmp___tas__SetCnMapsToUser);
	if (!soap_get___tas__SetCnMapsToUser(soap, &soap_tmp___tas__SetCnMapsToUser, "-tas:SetCnMapsToUser", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetCnMapsToUser(soap_tmp___tas__SetCnMapsToUser.tas__SetCnMapsToUser, tas__SetCnMapsToUserResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__SetCnMapsToUserResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__SetCnMapsToUserResponse.soap_put(soap, "tas:SetCnMapsToUserResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__SetCnMapsToUserResponse.soap_put(soap, "tas:SetCnMapsToUserResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetCnMapsToUser(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetCnMapsToUser soap_tmp___tas__GetCnMapsToUser;
	_tas__GetCnMapsToUserResponse tas__GetCnMapsToUserResponse;
	tas__GetCnMapsToUserResponse.soap_default(soap);
	soap_default___tas__GetCnMapsToUser(soap, &soap_tmp___tas__GetCnMapsToUser);
	if (!soap_get___tas__GetCnMapsToUser(soap, &soap_tmp___tas__GetCnMapsToUser, "-tas:GetCnMapsToUser", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCnMapsToUser(soap_tmp___tas__GetCnMapsToUser.tas__GetCnMapsToUser, tas__GetCnMapsToUserResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetCnMapsToUserResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetCnMapsToUserResponse.soap_put(soap, "tas:GetCnMapsToUserResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetCnMapsToUserResponse.soap_put(soap, "tas:GetCnMapsToUserResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__AddCertPathValidationPolicyAssignment(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__AddCertPathValidationPolicyAssignment soap_tmp___tas__AddCertPathValidationPolicyAssignment;
	_tas__AddCertPathValidationPolicyAssignmentResponse tas__AddCertPathValidationPolicyAssignmentResponse;
	tas__AddCertPathValidationPolicyAssignmentResponse.soap_default(soap);
	soap_default___tas__AddCertPathValidationPolicyAssignment(soap, &soap_tmp___tas__AddCertPathValidationPolicyAssignment);
	if (!soap_get___tas__AddCertPathValidationPolicyAssignment(soap, &soap_tmp___tas__AddCertPathValidationPolicyAssignment, "-tas:AddCertPathValidationPolicyAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AddCertPathValidationPolicyAssignment(soap_tmp___tas__AddCertPathValidationPolicyAssignment.tas__AddCertPathValidationPolicyAssignment, tas__AddCertPathValidationPolicyAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__AddCertPathValidationPolicyAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__AddCertPathValidationPolicyAssignmentResponse.soap_put(soap, "tas:AddCertPathValidationPolicyAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__AddCertPathValidationPolicyAssignmentResponse.soap_put(soap, "tas:AddCertPathValidationPolicyAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__RemoveCertPathValidationPolicyAssignment(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__RemoveCertPathValidationPolicyAssignment soap_tmp___tas__RemoveCertPathValidationPolicyAssignment;
	_tas__RemoveCertPathValidationPolicyAssignmentResponse tas__RemoveCertPathValidationPolicyAssignmentResponse;
	tas__RemoveCertPathValidationPolicyAssignmentResponse.soap_default(soap);
	soap_default___tas__RemoveCertPathValidationPolicyAssignment(soap, &soap_tmp___tas__RemoveCertPathValidationPolicyAssignment);
	if (!soap_get___tas__RemoveCertPathValidationPolicyAssignment(soap, &soap_tmp___tas__RemoveCertPathValidationPolicyAssignment, "-tas:RemoveCertPathValidationPolicyAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RemoveCertPathValidationPolicyAssignment(soap_tmp___tas__RemoveCertPathValidationPolicyAssignment.tas__RemoveCertPathValidationPolicyAssignment, tas__RemoveCertPathValidationPolicyAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__RemoveCertPathValidationPolicyAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__RemoveCertPathValidationPolicyAssignmentResponse.soap_put(soap, "tas:RemoveCertPathValidationPolicyAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__RemoveCertPathValidationPolicyAssignmentResponse.soap_put(soap, "tas:RemoveCertPathValidationPolicyAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__ReplaceCertPathValidationPolicyAssignment(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__ReplaceCertPathValidationPolicyAssignment soap_tmp___tas__ReplaceCertPathValidationPolicyAssignment;
	_tas__ReplaceCertPathValidationPolicyAssignmentResponse tas__ReplaceCertPathValidationPolicyAssignmentResponse;
	tas__ReplaceCertPathValidationPolicyAssignmentResponse.soap_default(soap);
	soap_default___tas__ReplaceCertPathValidationPolicyAssignment(soap, &soap_tmp___tas__ReplaceCertPathValidationPolicyAssignment);
	if (!soap_get___tas__ReplaceCertPathValidationPolicyAssignment(soap, &soap_tmp___tas__ReplaceCertPathValidationPolicyAssignment, "-tas:ReplaceCertPathValidationPolicyAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ReplaceCertPathValidationPolicyAssignment(soap_tmp___tas__ReplaceCertPathValidationPolicyAssignment.tas__ReplaceCertPathValidationPolicyAssignment, tas__ReplaceCertPathValidationPolicyAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__ReplaceCertPathValidationPolicyAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__ReplaceCertPathValidationPolicyAssignmentResponse.soap_put(soap, "tas:ReplaceCertPathValidationPolicyAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__ReplaceCertPathValidationPolicyAssignmentResponse.soap_put(soap, "tas:ReplaceCertPathValidationPolicyAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAssignedCertPathValidationPolicies(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAssignedCertPathValidationPolicies soap_tmp___tas__GetAssignedCertPathValidationPolicies;
	_tas__GetAssignedCertPathValidationPoliciesResponse tas__GetAssignedCertPathValidationPoliciesResponse;
	tas__GetAssignedCertPathValidationPoliciesResponse.soap_default(soap);
	soap_default___tas__GetAssignedCertPathValidationPolicies(soap, &soap_tmp___tas__GetAssignedCertPathValidationPolicies);
	if (!soap_get___tas__GetAssignedCertPathValidationPolicies(soap, &soap_tmp___tas__GetAssignedCertPathValidationPolicies, "-tas:GetAssignedCertPathValidationPolicies", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAssignedCertPathValidationPolicies(soap_tmp___tas__GetAssignedCertPathValidationPolicies.tas__GetAssignedCertPathValidationPolicies, tas__GetAssignedCertPathValidationPoliciesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAssignedCertPathValidationPoliciesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAssignedCertPathValidationPoliciesResponse.soap_put(soap, "tas:GetAssignedCertPathValidationPoliciesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAssignedCertPathValidationPoliciesResponse.soap_put(soap, "tas:GetAssignedCertPathValidationPoliciesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__AddDot1XConfiguration(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__AddDot1XConfiguration soap_tmp___tas__AddDot1XConfiguration;
	_tas__AddDot1XConfigurationResponse tas__AddDot1XConfigurationResponse;
	tas__AddDot1XConfigurationResponse.soap_default(soap);
	soap_default___tas__AddDot1XConfiguration(soap, &soap_tmp___tas__AddDot1XConfiguration);
	if (!soap_get___tas__AddDot1XConfiguration(soap, &soap_tmp___tas__AddDot1XConfiguration, "-tas:AddDot1XConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AddDot1XConfiguration(soap_tmp___tas__AddDot1XConfiguration.tas__AddDot1XConfiguration, tas__AddDot1XConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__AddDot1XConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__AddDot1XConfigurationResponse.soap_put(soap, "tas:AddDot1XConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__AddDot1XConfigurationResponse.soap_put(soap, "tas:AddDot1XConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetAllDot1XConfigurations(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetAllDot1XConfigurations soap_tmp___tas__GetAllDot1XConfigurations;
	_tas__GetAllDot1XConfigurationsResponse tas__GetAllDot1XConfigurationsResponse;
	tas__GetAllDot1XConfigurationsResponse.soap_default(soap);
	soap_default___tas__GetAllDot1XConfigurations(soap, &soap_tmp___tas__GetAllDot1XConfigurations);
	if (!soap_get___tas__GetAllDot1XConfigurations(soap, &soap_tmp___tas__GetAllDot1XConfigurations, "-tas:GetAllDot1XConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllDot1XConfigurations(soap_tmp___tas__GetAllDot1XConfigurations.tas__GetAllDot1XConfigurations, tas__GetAllDot1XConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetAllDot1XConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetAllDot1XConfigurationsResponse.soap_put(soap, "tas:GetAllDot1XConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetAllDot1XConfigurationsResponse.soap_put(soap, "tas:GetAllDot1XConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetDot1XConfiguration(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetDot1XConfiguration soap_tmp___tas__GetDot1XConfiguration;
	_tas__GetDot1XConfigurationResponse tas__GetDot1XConfigurationResponse;
	tas__GetDot1XConfigurationResponse.soap_default(soap);
	soap_default___tas__GetDot1XConfiguration(soap, &soap_tmp___tas__GetDot1XConfiguration);
	if (!soap_get___tas__GetDot1XConfiguration(soap, &soap_tmp___tas__GetDot1XConfiguration, "-tas:GetDot1XConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetDot1XConfiguration(soap_tmp___tas__GetDot1XConfiguration.tas__GetDot1XConfiguration, tas__GetDot1XConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetDot1XConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetDot1XConfigurationResponse.soap_put(soap, "tas:GetDot1XConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetDot1XConfigurationResponse.soap_put(soap, "tas:GetDot1XConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__DeleteDot1XConfiguration(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__DeleteDot1XConfiguration soap_tmp___tas__DeleteDot1XConfiguration;
	_tas__DeleteDot1XConfigurationResponse tas__DeleteDot1XConfigurationResponse;
	tas__DeleteDot1XConfigurationResponse.soap_default(soap);
	soap_default___tas__DeleteDot1XConfiguration(soap, &soap_tmp___tas__DeleteDot1XConfiguration);
	if (!soap_get___tas__DeleteDot1XConfiguration(soap, &soap_tmp___tas__DeleteDot1XConfiguration, "-tas:DeleteDot1XConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteDot1XConfiguration(soap_tmp___tas__DeleteDot1XConfiguration.tas__DeleteDot1XConfiguration, tas__DeleteDot1XConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__DeleteDot1XConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__DeleteDot1XConfigurationResponse.soap_put(soap, "tas:DeleteDot1XConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__DeleteDot1XConfigurationResponse.soap_put(soap, "tas:DeleteDot1XConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__SetNetworkInterfaceDot1XConfiguration(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__SetNetworkInterfaceDot1XConfiguration soap_tmp___tas__SetNetworkInterfaceDot1XConfiguration;
	_tas__SetNetworkInterfaceDot1XConfigurationResponse tas__SetNetworkInterfaceDot1XConfigurationResponse;
	tas__SetNetworkInterfaceDot1XConfigurationResponse.soap_default(soap);
	soap_default___tas__SetNetworkInterfaceDot1XConfiguration(soap, &soap_tmp___tas__SetNetworkInterfaceDot1XConfiguration);
	if (!soap_get___tas__SetNetworkInterfaceDot1XConfiguration(soap, &soap_tmp___tas__SetNetworkInterfaceDot1XConfiguration, "-tas:SetNetworkInterfaceDot1XConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetNetworkInterfaceDot1XConfiguration(soap_tmp___tas__SetNetworkInterfaceDot1XConfiguration.tas__SetNetworkInterfaceDot1XConfiguration, tas__SetNetworkInterfaceDot1XConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__SetNetworkInterfaceDot1XConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__SetNetworkInterfaceDot1XConfigurationResponse.soap_put(soap, "tas:SetNetworkInterfaceDot1XConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__SetNetworkInterfaceDot1XConfigurationResponse.soap_put(soap, "tas:SetNetworkInterfaceDot1XConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__GetNetworkInterfaceDot1XConfiguration(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__GetNetworkInterfaceDot1XConfiguration soap_tmp___tas__GetNetworkInterfaceDot1XConfiguration;
	_tas__GetNetworkInterfaceDot1XConfigurationResponse tas__GetNetworkInterfaceDot1XConfigurationResponse;
	tas__GetNetworkInterfaceDot1XConfigurationResponse.soap_default(soap);
	soap_default___tas__GetNetworkInterfaceDot1XConfiguration(soap, &soap_tmp___tas__GetNetworkInterfaceDot1XConfiguration);
	if (!soap_get___tas__GetNetworkInterfaceDot1XConfiguration(soap, &soap_tmp___tas__GetNetworkInterfaceDot1XConfiguration, "-tas:GetNetworkInterfaceDot1XConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetNetworkInterfaceDot1XConfiguration(soap_tmp___tas__GetNetworkInterfaceDot1XConfiguration.tas__GetNetworkInterfaceDot1XConfiguration, tas__GetNetworkInterfaceDot1XConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__GetNetworkInterfaceDot1XConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__GetNetworkInterfaceDot1XConfigurationResponse.soap_put(soap, "tas:GetNetworkInterfaceDot1XConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__GetNetworkInterfaceDot1XConfigurationResponse.soap_put(soap, "tas:GetNetworkInterfaceDot1XConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tas__DeleteNetworkInterfaceDot1XConfiguration(struct soap *soap, AdvancedSecurityServiceBindingService *service)
{	struct __tas__DeleteNetworkInterfaceDot1XConfiguration soap_tmp___tas__DeleteNetworkInterfaceDot1XConfiguration;
	_tas__DeleteNetworkInterfaceDot1XConfigurationResponse tas__DeleteNetworkInterfaceDot1XConfigurationResponse;
	tas__DeleteNetworkInterfaceDot1XConfigurationResponse.soap_default(soap);
	soap_default___tas__DeleteNetworkInterfaceDot1XConfiguration(soap, &soap_tmp___tas__DeleteNetworkInterfaceDot1XConfiguration);
	if (!soap_get___tas__DeleteNetworkInterfaceDot1XConfiguration(soap, &soap_tmp___tas__DeleteNetworkInterfaceDot1XConfiguration, "-tas:DeleteNetworkInterfaceDot1XConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteNetworkInterfaceDot1XConfiguration(soap_tmp___tas__DeleteNetworkInterfaceDot1XConfiguration.tas__DeleteNetworkInterfaceDot1XConfiguration, tas__DeleteNetworkInterfaceDot1XConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tas__DeleteNetworkInterfaceDot1XConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tas__DeleteNetworkInterfaceDot1XConfigurationResponse.soap_put(soap, "tas:DeleteNetworkInterfaceDot1XConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tas__DeleteNetworkInterfaceDot1XConfigurationResponse.soap_put(soap, "tas:DeleteNetworkInterfaceDot1XConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
